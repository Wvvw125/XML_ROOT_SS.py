Index: 实用工具/完成工具/XML_ROOT_CFG配置工具.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 执行机构：At home at college\r\n# 出 品 人：\uD83C\uDF2B⭐※\r\n# 开发时间:2022/2/10 13:56\r\n# post  请求（携带了参数）\r\n# 响应数据是一组 jason 数据\r\nimport xml.etree.ElementTree as ET\r\nimport os\r\nfrom time import  sleep\r\n#完善1，set写入 检测非空  2 写入前检测是否对应\r\naa ='alias'\r\nvv ='value'\r\nnname='name'\r\nk='0'\r\nclass main(object):\r\n\r\n def __init__(self,path):\r\n    self.path=path\r\n def find_name(self,path):\r\n     findname = os.listdir(path)\r\n     f_name = []\r\n     for nam in findname:\r\n       if '.xml' in nam:\r\n          f_name.append(nam)\r\n          continue\r\n       else:\r\n          print('目标为其他文件，请添加配置文件后重试！！！！')\r\n          continue\r\n     return f_name\r\n def root1(self,path,f_name1):\r\n       global  tree,root,xml_file\r\n       xml_file = path +'\\\\'+f_name1\r\n       tree = ET.parse(xml_file)\r\n       root = tree.getroot()\r\n    #   return root,tree,xml_file\r\n sleep(1)\r\n\r\n # 0 界面显示配置\r\n class face_display():\r\n     def __init__(self):\r\n         pass\r\n\r\n\r\n     def O(self):\r\n         root[0][0].set(vv, '0')  # x白边\r\n         root[0][1].set(vv, '0')  # Y白边\r\n         root[0][2].set(vv, '0')  # Z白边\r\n         root[0][3].set(vv, '0')  # 白墨显示模式\r\n         root[0][4].set(vv, '0')  # 墨量显示模式\r\n         root[0][5].set(vv, '0')  # 列印显示模式\r\n         root[0][6].set(vv, '0')  # Z电机显示显示模式\r\n         root[0][7].set(vv, '0')  # 测高显示模式\r\n\r\n     def set_colo_op(self):\r\n         while True:\r\n            if root[0][11][0].attrib[nname]=='nInkCheckColor_0':\r\n             root[0][11][0].set(vv, '0')\r\n             root[0][11][1].set(vv, '1')\r\n             root[0][11][2].set(vv, '2')\r\n             root[0][11][3].set(vv, '3')\r\n             root[0][11][4].set(vv, '4')\r\n             root[0][11][5].set(vv, '5')\r\n             root[0][11][6].set(vv, '6')\r\n             root[0][11][7].set(vv, '7')\r\n             break\r\n            else:\r\n             print(root[0][11][0].attrib[aa],'配置错误，！请停止更新后尝试')\r\n             sleep(5)\r\n         print('墨量显示：修改完成：')\r\n\r\n     def set_colo_InkCount(self):\r\n         while True:\r\n             if root[0][12].attrib[nname] == 'dbInkCount':\r\n                for a in range(0,len(root[0][12])):\r\n                 root[0][12][a][0].set(vv,'0.000659557')\r\n                 root[0][12][a][1].set(vv,'0.000942226')\r\n                 root[0][12][a][2].set(vv,'0.001601783')\r\n                break\r\n             else:\r\n                 print(root[0][12].attrib[aa], '配置错误，！请停止更新后尝试')\r\n                 sleep(5)\r\n         print('墨点体积：修改完成：')\r\n     def set_InkCountColor(self):\r\n         while True:\r\n             if root[0][13].attrib[nname] == 'nInkCountColor':\r\n                 root[0][13][0].set(vv, '0')\r\n                 root[0][13][1].set(vv, '1')\r\n                 root[0][13][2].set(vv, '2')\r\n                 root[0][13][3].set(vv, '3')\r\n                 root[0][13][4].set(vv, '4')\r\n                 root[0][13][5].set(vv, '5')\r\n                 root[0][13][6].set(vv, '6')\r\n                 root[0][13][7].set(vv, '4')\r\n                 root[0][13][8].set(vv, '5')\r\n                 root[0][13][9].set(vv, '6')\r\n                 root[0][13][10].set(vv, '4')\r\n                 root[0][13][11].set(vv, '5')\r\n                 root[0][13][12].set(vv, '6')\r\n                 root[0][13][13].set(vv, '7')\r\n                 root[0][13][14].set(vv, '8')\r\n                 break\r\n             else:\r\n                 print(root[0][13].attrib[aa], '配置错误，！请停止更新后尝试')\r\n                 sleep(5)\r\n         print('PRN墨量色续显示：修改完成：')\r\n # 1 打印参数配置\r\n class print_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n         while True:\r\n             for num in range(0, len(root[1])):\r\n                 root[1][7][num].set(vv, '0')\r\n             break\r\n         print('白边模式置0完成：', root[1][7][0].attrib[aa],root[1][7][0].attrib[vv])\r\n\r\n     def color(self):\r\n        for i in range(0,len(root[1])):\r\n            if root[1][i].attrib[nname]=='BP_CUT_INK_CONFIG':\r\n                 for a in range(0, 16):\r\n                     color_List = root[1][i][2][a]\r\n                     color_List.set(vv, '100')  # 截墨墨量-修改键值\r\n                 print('截墨，墨量显示：', root[1][i][2][15].attrib[vv])\r\n                 # 墨量修改   [1][12][2][a]\r\n                 # 1  [1]   ''<group name=\"BP_COMMON_CONFIG\" alias=\"打印通用配置\">    第二级   第二个配置\r\n                 # 2  [12]                                                          第三级   第十三个配置\r\n                 # 3  [2]                                                           第四级   第三个配置\r\n                 # 4  [a]                                                           第五级   第a配置\r\n            else:\r\n              pass\r\n              print(root[1][i].attrib[aa],'配置错误，更新后尝试')\r\n\r\n     def Oset_clibration(self):\r\n         for i in range (0,len(root[1])):\r\n              if root[1][i].attrib[nname] == 'BP_CORRECT_PRINT_CONFIG':\r\n                for a in range(0,3):\r\n                 root[1][i][a].set(vv, '0')\r\n                 for b in range(0,3):\r\n                  root[1][i][3][a][b].set(vv,'0')\r\n                  root[1][i][4][a][b].set(vv,'0')\r\n                print('横向校准：归零', root[1][i][3][0][0].attrib[aa],root[1][i][3][0][0].attrib[vv])\r\n                print('纵向校准：归零', root[1][i][4][0][0].attrib[aa],root[1][i][4][0][0].attrib[vv])\r\n                print('微调校准：归零', root[1][i][0].attrib[aa],root[1][i][0].attrib[vv])\r\n              else:\r\n                  pass\r\n # 2 喷头参数配置\r\n class head_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O_360_4C_6(self):  # 彩色\r\n         for headNum in range(13, 76):\r\n             root[2][headNum].set(vv,\r\n                                  'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:0,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:3,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:1,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:1,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:2,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:2,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:15,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:15,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n         print('180系 head_0 喷头数据归零:', root[2][13].attrib)\r\n         # 喷头参数配置\r\n\r\n     def O_400_4C_8(self):  # 彩色\r\n         for headNum in range(13, 76):\r\n             root[2][headNum].set(vv,\r\n                                  'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:2,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:1,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:3,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:0,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:0,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:3,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:1,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:2,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0')\r\n         print('400系 head_0 喷头数据归零:', root[2][13].attrib)  # head_0 喷头数据归零   head_64\r\n\r\n     def Oset_400_1c1w(self):\r\n         while True:\r\n             root[2][13].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:0,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:1,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:2,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:3,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:3,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:2,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:1,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:0,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][14].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:1400,hxrp:1400,hyp:800,hid:0,cphl_0:8,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:8,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:8,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:8,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:8,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:8,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:8,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:8,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             break\r\n         print('400系 1C1W head_0 喷头数据归零:', root[2][13].attrib)\r\n\r\n     def Oset_400_2c2w(self):\r\n         while True:\r\n             root[2][13].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:0,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:1,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:2,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:3,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:3,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:2,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:1,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:0,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][14].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:0,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:1,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:2,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:3,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:3,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:2,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:1,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:0,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][15].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:1400,hxrp:1400,hyp:800,hid:0,cphl_0:8,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:8,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:8,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:8,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:8,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:8,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:8,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:8,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][16].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:1400,hxrp:1400,hyp:800,hid:0,cphl_0:8,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:8,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:8,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:8,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:8,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:8,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:8,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:8,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             break\r\n         print('400系 2c2w head_0 喷头数据归零:', root[2][13].attrib)\r\n\r\n     def Oset_180_w_o_s(self):\r\n         while True:\r\n             root[2][13].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:10,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:10,hlvg_1:0,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:10,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:10,hlvg_3:0,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:10,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:10,hlvg_5:0,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:15,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:15,hlvg_7:0,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][14].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:180,hid:0,cphl_0:8,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:8,hlvg_1:0,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:8,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:8,hlvg_3:0,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:8,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:8,hlvg_5:0,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:15,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:15,hlvg_7:0,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][15].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:360,hid:0,cphl_0:0,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:3,hlvg_1:0,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:1,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:2,hlvg_3:0,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:15,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:15,hlvg_5:0,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:15,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:15,hlvg_7:0,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             root[2][16].set(vv,\r\n                             'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:540,hid:0,cphl_0:9,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:9,hlvg_1:0,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:9,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:9,hlvg_3:0,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:9,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:9,hlvg_5:0,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:15,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:15,hlvg_7:0,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             break\r\n         print('180系 head_0 喷头数据归零:', root[2][13].attrib)\r\n     #喷头参数置0为一号头数据\r\n     def Oset_HeadOne_0(self):\r\n         while True:\r\n             if root[2][13].attrib[nname] == 'head_0':\r\n                 data = root[2][13].attrib[vv]\r\n                 for headNum in range(13, 76):\r\n                     root[2][headNum].set(vv, data)\r\n                 print('0-64 head_0 喷头数据归零为head 1:', root[2][13].attrib[vv])\r\n                 break\r\n             else:\r\n                 print(root[2][13].attrib[aa], '配置错误，更新后重试')\r\n                 sleep(5)\r\n\r\n     #喷头参数置0为1和2号头数据\r\n     def Oset_HeadOneTWO_0(self):\r\n        while True:\r\n            if root[2][13].attrib[nname] == 'head_0':\r\n                 dataONe=root[2][13].attrib[vv]\r\n                 dataTWO=root[2][14].attrib[vv]\r\n                 for headNum in range(13, 76):\r\n                    if headNum%2!=0:\r\n                     root[2][headNum].set(vv,dataONe)\r\n                    else:\r\n                     root[2][headNum].set(vv, dataTWO)\r\n                 break\r\n                 print('0-64 head_0 喷头数据归零为head 1:', root[2][13].attrib[vv])\r\n            else:\r\n                print(root[2][13].attrib[aa], '配置错误，更新后重试')\r\n                sleep(5)\r\n     # 动作配置 白边配置 0-15\r\n\r\n     #指定400系喷头归零\r\n     def Oset_NunHead400_O(self,headNum,headNum2):\r\n         a = 13 + headNum - 1\r\n         for i in range(headNum,headNum2+1):\r\n             root[2][a].set(vv,'hi:0,hio:1,jws:0,hxlp:0,hxrp:0,hyp:0,hid:0,cphl_0:15,hlvg_0:0,hlxlo_0:0,hlxro_0:0,hlyo_0:0,cphl_1:15,hlvg_1:1,hlxlo_1:0,hlxro_1:0,hlyo_1:0,cphl_2:15,hlvg_2:0,hlxlo_2:0,hlxro_2:0,hlyo_2:0,cphl_3:15,hlvg_3:1,hlxlo_3:0,hlxro_3:0,hlyo_3:0,cphl_4:15,hlvg_4:0,hlxlo_4:0,hlxro_4:0,hlyo_4:0,cphl_5:15,hlvg_5:1,hlxlo_5:0,hlxro_5:0,hlyo_5:0,cphl_6:15,hlvg_6:0,hlxlo_6:0,hlxro_6:0,hlyo_6:0,cphl_7:15,hlvg_7:1,hlxlo_7:0,hlxro_7:0,hlyo_7:0,')\r\n             a+=1\r\n             print('400系 head_0 喷头数据归零:', root[2][a].attrib)  # head_0 喷头数据归零   head_64\r\n\r\n     def SetuseHeadnum(self,head_headnum):\r\n           #self.head_headnum=head_headnum\r\n           root[2][9].set(vv,str(head_headnum))\r\n           print('设置使用喷头数量:', root[2][9].attrib[aa], root[2][9].attrib[vv])\r\n     def SetuseHeadNNNNN(self):\r\n         def Addchange(num):\r\n             if  root[2][num].attrib[vv].split(',')[6] =='hid:0':\r\n                 NNb=root[2][num].attrib[vv].replace('hid:0','hid:1')\r\n             else:\r\n                 NNb=root[2][num].attrib[vv]\r\n                 print('喷头%d已配置反向'%(num-12))\r\n             return NNb\r\n         while True:\r\n             if root[2][13].attrib[nname] == 'head_0':\r\n                 for headNum in range(13, 76):\r\n                     root[2][headNum].set(vv,Addchange(headNum))\r\n                 break\r\n             else:\r\n                 print(root[2][13].attrib[aa], '配置错误，更新后重试')\r\n                 sleep(5)\r\n         print('喷头装配方向:', root[2][13].attrib[aa], root[2][13].attrib[vv].split(',')[6])\r\n # 3 系统配置\r\n class system_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n        if root[3][3].attrib[nname]=='BoardIp':\r\n         for num in range(0, 31):\r\n             root[3][3][num].set(vv, '0.0.0.0')\r\n         print('板卡地址切换USB模式|',root[3][3][0].attrib[nname],';', root[3][3][0].attrib[aa],';',root[3][3][0].attrib[vv])\r\n        else:\r\n            print(root[3][3].attrib[aa],'配置错误')\r\n            sleep(5)\r\n            pass\r\n\r\n     def ETH(self):\r\n         while True:\r\n            if root[3][3].attrib[nname] == 'BoardIp':\r\n             root[3][3][0].set(vv, '192.168.0.2')\r\n             break\r\n             print('板卡地址切换千兆网|',root[3][3][0].attrib[nname],';', root[3][3][0].attrib[aa],';',root[3][3][0].attrib[vv])\r\n            else:\r\n             print(root[3][3].attrib[aa], '配置错误')\r\n             sleep(5)\r\n             pass\r\n\r\n # 4 板卡配置\r\n class board_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     #最大行程\r\n     def Maxtrip(self):\r\n       while True:\r\n         if root[4][9].attrib[nname]=='BP_STROKE_INFO':\r\n           for a in  range(0,5):\r\n            root[4][9][a].set(vv,'50000')\r\n           print('最大行程',root[4][9][1].attrib[nname],root[4][9][1].attrib[aa],root[4][9][1].attrib[vv])\r\n           break\r\n         else:\r\n           print(root[4][9].attrib[aa], '配置错误，更新后重试')\r\n           sleep(5)\r\n           pass\r\n\r\n     #内存设置\r\n     def setRam(self):\r\n         def RAM512():\r\n             while True:\r\n                 for a in range(0, 2):\r\n                     root[4][a].set(vv, '512')\r\n                 print('内存大小', root[4][1].attrib[nname], root[4][1].attrib[aa], root[4][1].attrib[vv])\r\n                 break\r\n\r\n         def RAM256():\r\n             while True:\r\n                 for a in range(0, 2):\r\n                     root[4][a].set(vv, '256')\r\n                 print('内存大小', root[4][1].attrib[nname], root[4][1].attrib[aa], root[4][1].attrib[vv])\r\n                 break\r\n\r\n         while True:\r\n\r\n             if root[4][1].attrib[nname] == 'nBoardMemory':\r\n                 if root[3][3][0].attrib[vv] == '192.168.0.2':\r\n                     RAM512()\r\n                     break\r\n                 elif root[2][9].attrib[vv] > '2' and root[2][0].attrib[vv] == '260':\r\n                     if '7610' or '1600' in f_name2:\r\n                         RAM256()\r\n                         break\r\n                     else:\r\n                         RAM512()\r\n                         break\r\n                 elif root[2][9].attrib[vv] <= '2' and root[2][0].attrib[vv] == '260':\r\n                     RAM256()\r\n                     break\r\n                 else:\r\n                     RAM256()\r\n                     break\r\n             else:\r\n                 print(root[4][9].attrib[aa], '配置错误，更新后重试')\r\n                 sleep(5)\r\n                 pass\r\n\r\n     #板卡支持喷头数量设置\r\n     def setSupportHead(self):\r\n         def Head8():\r\n             while True:\r\n                     root[4][5].set(vv, '8')\r\n                     root[4][6].set(vv, '2')\r\n                     print('板卡支持喷头数', root[4][5].attrib[nname], root[4][5].attrib[aa], root[4][5].attrib[vv])\r\n                     break\r\n\r\n         def Head4():\r\n             while True:\r\n                 root[4][5].set(vv, '4')\r\n                 root[4][6].set(vv, '1')\r\n                 print('板卡支持喷头数', root[4][5].attrib[nname], root[4][5].attrib[aa], root[4][5].attrib[vv])\r\n                 break\r\n         while True:\r\n             if root[4][5].attrib[nname] == 'nBoardSupportHeadCnt' and root[4][6].attrib[nname] == 'nBoardFibreCnt'  :\r\n                 if  root[2][9].attrib[vv] > '4' and root[2][0].attrib[vv] == '260':\r\n                     if '7610' or '1600' in f_name2:\r\n                         Head4()\r\n                         break\r\n                     else:\r\n                         Head8()\r\n                         break\r\n                 elif root[2][9].attrib[vv] > '4' and root[2][0].attrib[vv] == '513':\r\n                     Head8()\r\n                     break\r\n                 else:\r\n                     Head4()\r\n                     break\r\n             else:\r\n                 print(root[4][5].attrib[aa], '配置错误，更新后重试')\r\n                 sleep(5)\r\n                 pass\r\n # 5 速度配\r\n class speed_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n         pass\r\n     def setfomartting(self):\r\n        while True:\r\n         if root[5][3].attrib[nname] == 'BP_IC_MOTOR_SPEED_CONFIG' and root[5][4].attrib[nname] == 'BP_SI_MOTOR_SPEED_CONFIG':\r\n          root[5][3][0].set(vv,'256')\r\n          root[5][3][1].set(vv, '3000')\r\n          root[5][4][0].set(vv, '256')\r\n          root[5][4][1].set(vv, '3000')\r\n          print('墨栈刮片速度格式化',root[5][3][1].attrib)\r\n          break\r\n         else:\r\n           print(root[5][3].attrib[aa], '配置错误，更新后重试')\r\n           sleep(5)\r\n           pass\r\n     def setMotorfomartting(self):\r\n        while True:\r\n         if root[5][0].attrib[nname] == 'BP_X_MOTOR_SPEED_CONFIG' and root[5][1].attrib[nname] == 'BP_Y_MOTOR_SPEED_CONFIG' and root[5][2].attrib[nname] == 'BP_Z_MOTOR_SPEED_CONFIG':\r\n         #X\r\n          root[5][0][0].set(vv,'3.20000')\r\n          root[5][0][1].set(vv, '100')\r\n          root[5][0][2].set(vv, '120')\r\n          root[5][0][3].set(vv, '300')\r\n          root[5][0][4].set(vv, '100')\r\n          root[5][0][5].set(vv, '800')\r\n          root[5][0][6].set(vv, '400')\r\n          root[5][0][7].set(vv, '0')\r\n          root[5][0][8].set(vv, '0.1')\r\n          root[5][0][9][0].set(vv, '650')\r\n          root[5][0][9][1].set(vv, '750')\r\n          root[5][0][9][2].set(vv, '850')\r\n          print('X速度格式化',root[5][0][0].attrib)\r\n         #Y\r\n          root[5][1][0].set(vv, '100')\r\n          root[5][1][1].set(vv, '100')\r\n          root[5][1][2].set(vv, '8')\r\n          root[5][1][3].set(vv, '50')\r\n          root[5][1][4][0].set(vv, '40')\r\n          root[5][1][4][1].set(vv, '60')\r\n          root[5][1][4][2].set(vv, '80')\r\n          print('Y速度格式化', root[5][1][0].attrib)\r\n         #Z\r\n          root[5][2][0].set(vv,'500')\r\n          root[5][2][1].set(vv, '0.5')\r\n          root[5][2][2].set(vv, '5')\r\n          print('Z速度格式化',root[5][2][0].attrib)\r\n\r\n          break\r\n         else:\r\n           print(root[5][3].attrib[aa], '配置错误，更新后重试')\r\n           sleep(5)\r\n           pass\r\n # 6 功能配置\r\n class funtion_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n         pass\r\n # 7 动作配置\r\n class action_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n          for Num2 in range(0, len(root[7])):\r\n             root[7][Num2].set(vv, '0')\r\n          print('动作模式置0：', root[7][14].attrib)\r\n          print('长度',len(root[7]))\r\n # 8 清洗配置\r\n class clean_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def UV(self):\r\n         while True:\r\n            if root[8][25].attrib[nname] == 'nPumpPort':\r\n             root[8][25][0].set(vv, '8')\r\n             root[8][25][1].set(vv, '7')\r\n             root[8][25][2].set(vv, '6')\r\n             root[8][25][3].set(vv, '5')\r\n             root[8][25][4].set(vv, '4')\r\n             root[8][25][5].set(vv, '3')\r\n             print('UV 抽墨端口1：', root[8][25][0].attrib[aa], ';', root[8][25][0].attrib[vv])\r\n             break\r\n            else:\r\n                print(root[8][25].attrib[aa], '配置错误，更新后重试')\r\n                sleep(5)\r\n                pass\r\n\r\n     def not_UV(self):\r\n         while True:\r\n            if root[8][25].attrib[nname] == 'nPumpPort':\r\n             root[8][25][0].set(vv, '10')\r\n             root[8][25][1].set(vv, '9')\r\n             root[8][25][2].set(vv, '8')\r\n             root[8][25][3].set(vv, '7')\r\n             root[8][25][4].set(vv, '6')\r\n             root[8][25][5].set(vv, '5')\r\n             root[8][25][6].set(vv, '4')\r\n             root[8][25][7].set(vv, '3')\r\n             print('not UV抽墨端口1：', root[8][25][0].attrib[aa], ';',root[8][25][0].attrib[vv])\r\n             break\r\n            else:\r\n             print(root[8][25].attrib[aa], '配置错误，更新后重试')\r\n             sleep(5)\r\n             pass\r\n\r\n     def Autoclean(self):\r\n         while True:\r\n            if root[8][26].attrib[nname] == 'BP_PRINT_CLEAN_CONFIG' :\r\n             root[8][26][0].set(vv, '0')\r\n             root[8][27][0].set(vv, '0')\r\n             break\r\n             print('自动清洗置0模式完成|', root[8][26][0].attrib[aa],';',root[8][26][0].attrib[vv])\r\n            else:\r\n                print(root[8][26].attrib[aa], '配置错误，更新后重试')\r\n                sleep(5)\r\n                pass\r\n\r\n     def CleanActionSetFomartting(self):\r\n         while True:\r\n             if root[8][-1].attrib[nname] == 'dbXMotoPos':\r\n                 root[8][-1][0].set(vv,'50')   #清洗小车位置\r\n                 root[8][-1][1].set(vv, '100')\r\n                 root[8][-1][2].set(vv, '150')\r\n                 root[8][-1][3].set(vv, '200')\r\n                 root[8][-1][4].set(vv, '250')\r\n\r\n                 root[8][-2][0].set(vv,'1000')   #清洗小车位置\r\n                 root[8][-2][1].set(vv, '1000')\r\n                 root[8][-2][2].set(vv, '1000')\r\n                 root[8][-2][3].set(vv, '1000')\r\n                 root[8][-2][4].set(vv, '4000')\r\n\r\n                 root[8][-8].set(vv, '0')   #清洗Z位置\r\n                 root[8][-9].set(vv, '3')\r\n                 root[8][-10].set(vv, '3')\r\n                 root[8][-11].set(vv, '5')\r\n\r\n                 root[8][-12].set(vv, '2001')   #清洗墨栈位置\r\n                 root[8][-13].set(vv, '1000')\r\n                 root[8][-14].set(vv, '2001')\r\n                 root[8][-15].set(vv, '1000')\r\n                 print('清洗动作各轴格式化完成！',root[8][-8].attrib[aa],root[8][-12].attrib[aa])\r\n                 break\r\n             else:\r\n                 print(root[8][-1].attrib[aa], '配置错误，更新后重试')\r\n                 sleep(5)\r\n                 pass\r\n\r\n # 9 测试图配置\r\n class textp_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n      while True:\r\n       if root[9].attrib[nname] == 'BP_TEST_CFG_PRN_PARA':\r\n          for Num1 in range(0, len(root[9])):\r\n             root[9][Num1].set(vv, '0')\r\n             if Num1 == 9:\r\n                 for Num2 in range(0, len(root[9][9])):\r\n                     root[9][9][Num2].set(vv, '0')\r\n                 break\r\n             else:\r\n                 pass\r\n                 break\r\n          print('测试图模式置0：', root[9][0].attrib)  # 0-4   4有下级\r\n          break\r\n       else:\r\n          print(root[9].attrib[aa], '配置错误，更新后重试')\r\n          sleep(5)\r\n          pass\r\n     def B_16(self):\r\n       while True:\r\n        if root[9][9].attrib[nname] == 'nHeadsPos':\r\n          for Num1 in range(0,8):\r\n             if Num1==0:\r\n                 root[9][4][Num1].set(vv, '0')\r\n             elif Num1%2==0:\r\n                 root[9][4][Num1].set(vv, '0')\r\n             else:\r\n                 root[9][4][Num1].set(vv, '16')\r\n          break\r\n          print('测试图模式置0：', root[9][4][3].attrib)\r\n        else:\r\n            print(root[9][9].attrib[aa], '配置错误，更新后重试')\r\n            sleep(5)\r\n            pass\r\n     def OSet_TestPrn1(self):\r\n         while True:\r\n             if root[9][3].attrib[nname] == 'nVerDistanceTestFileType':\r\n                 for Num1 in range(0,5):\r\n                        root[9][Num1+3].set(vv, '1')\r\n                 print('测试图模式置0：', root[9][0].attrib)  # 0-4   4有下级\r\n                 break\r\n             else:\r\n                 print(root[9][3].attrib[aa], '配置错误，更新后重试')\r\n                 sleep(5)\r\n                 pass\r\n # 10 高速圆柱配置\r\n class speedcylinder_cfg():\r\n     def __init__(self):\r\n         pass\r\n\r\n     def O(self):\r\n         for num in range(0, 13):\r\n             root[0][num].set(vv, '0')\r\n         print('圆柱模式置0完成：', root[10][13].attrib[aa],root[10][13].attrib[vv])\r\n #$$固定动作修改\r\n\r\n class Fixed_action():\r\n     def __init__(self):\r\n         pass\r\n     def Pactionset(self,a,b,c,d,e,f):\r\n         root[0][0].set(vv, a)    # a  X白边\r\n         root[0][1].set(vv, b)    #  b Y白边\r\n         root[1][7][9].set(vv, c) #  c   Y白边运行模式 #\r\n         root[7][8].set(vv,d)     # d 打印特种动作   #\r\n         root[7][10].set(vv,e)    #  e  多份 小车复位不复位   #\r\n         root[7][12].set(vv,f)    # f 多份不复位，下一份方向  #\r\n\r\n  # a  X白边 b Y白边  c   Y白边运行模式 # d 打印特种动作 #  e  多份 小车复位不复位 # f 多份不复位，下一份方向  #\r\n # $$双工位动作修改$$\r\n     def P2(self):\r\n      root[0][0].set(vv,'2')     #X白边\r\n      root[0][1].set(vv,'2')     #Y白边\r\n      root[1][7][9].set(vv, '2') #Y白边运行模式 #\r\n      root[7][8].set(vv, '2')    #打印特种动作   #\r\n      root[7][10].set(vv, '1')  # 多份 小车复位不复位   #\r\n      root[7][12].set(vv, '1')  # 多份不复位，下一份方向  #\r\n      print('双工位动作修改完成：',root[7][8].attrib[aa],root[7][8].attrib[vv],root[1][7][9].attrib[aa],root[1][7][9].attrib[vv])\r\n # $$跑台动作修改$$\r\n     def PT(self):\r\n      root[0][0].set(vv,'2')     #X白边\r\n      root[0][1].set(vv,'2')     #Y白边\r\n      root[1][7][9].set(vv, '1') #Y白边运行模式 #\r\n      root[7][8].set(vv, '1')    #打印特种动作   #\r\n      root[7][10].set(vv, '1')  # 多份 小车复位不复位   #\r\n      root[7][12].set(vv, '1')  # 多份不复位，下一份方向  #\r\n      print('跑台机动作修改完成：',root[7][8].attrib[aa],root[7][8].attrib[vv],root[1][7][9].attrib[aa],root[1][7][9].attrib[vv])\r\n # $$椭圆动作修改$$\r\n     def TY(self):\r\n      root[0][0].set(vv,'2')     #X白边\r\n      root[0][1].set(vv,'2')     #Y白边\r\n      root[1][7][9].set(vv, '3') #Y白边运行模式 #\r\n      root[7][8].set(vv, '3')    #打印特种动作   #\r\n      root[7][10].set(vv, '1')  # 多份 小车复位不复位   #\r\n      root[7][12].set(vv, '1')  # 多份不复位，下一份方向  #\r\n      print('椭圆机动作修改完成：',root[7][8].attrib[aa],root[7][8].attrib[vv],root[1][7][9].attrib[aa],root[1][7][9].attrib[vv])\r\n # $$纸箱机动作修改$$\r\n     def ZX(self):\r\n      root[0][0].set(vv,'1')     #X白边\r\n      root[0][1].set(vv,'1')     #Y白边\r\n      root[1][7][9].set(vv, '4') #Y白边运行模式 #\r\n      root[7][8].set(vv, '4')    #打印特种动作   #\r\n      root[7][10].set(vv, '1')  # 多份 小车复位不复位   #\r\n      root[7][12].set(vv, '1')  # 多份不复位，下一份方向  #\r\n      print('纸箱机动作修改完成：',root[7][8].attrib[aa],root[7][8].attrib[vv],root[1][7][9].attrib[aa],root[1][7][9].attrib[vv])\r\n# $$PB动作修改$$\r\n     def PB(self):\r\n         root[0][0].set(vv, '1')  # X白边\r\n         root[0][1].set(vv, '1')  # Y白边\r\n         root[1][7][9].set(vv, '0')  # Y白边运行模式 #\r\n         root[7][8].set(vv, '0')  # 打印特种动作   #\r\n         root[7][10].set(vv, '1')  # 多份 小车复位不复位   #\r\n         root[7][12].set(vv, '1')  # 多份不复位，下一份方向  #\r\n         print('平板动作修改完成：', root[7][8].attrib[aa], root[7][8].attrib[vv], root[1][7][9].attrib[aa],\r\n               root[1][7][9].attrib[vv])\r\n\r\n# $$写真机动作修改$$\r\n     def Xzj(self):\r\n         root[0][0].set(vv, '1')  # X白边\r\n         root[0][1].set(vv, '0')  # Y白边\r\n         root[1][7][9].set(vv, '0')  # Y白边运行模式 #\r\n         root[7][8].set(vv, '0')  # 打印特种动作   #\r\n         root[7][10].set(vv, '1')  # 多份 小车复位不复位   #\r\n         root[7][12].set(vv, '1')  # 多份不复位，下一份方向  #\r\n         print('写真机修改完成：', root[7][8].attrib[aa], root[7][8].attrib[vv], root[1][7][9].attrib[aa],\r\n               root[1][7][9].attrib[vv])\r\n\r\n#测试\r\n     def text(self):\r\n         pass\r\n\r\n # 追加头文件\r\n def update_xml(self):\r\n     out = open(xml_file, 'wb')\r\n     out.write(b'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone = \"yes\" ?>\\n')\r\n     tree.write(out, encoding='UTF-8', xml_declaration=False)\r\n     out.close()\r\n\r\nclass setset(object):\r\n def __init__(self, path,f_name1):\r\n    self.path = path\r\n    self.f_name1=f_name1\r\n    Run = main(path)\r\n    Run.root1(path,f_name1)\r\n    #    Root= Run.root1()  # 加载数据\r\n    #    root = Root[0]\r\n    #    tree = Root[1]\r\n    #    xml_file = Root[2]  # #格式化数据 #数据化   #文件名\r\n    print(\"===========================开始修改=======================================\")\r\n    Run.face_display().set_colo_op()  # 墨量 显示\r\n    Run.print_cfg().color()           # 截墨 墨量 100\r\n    Run.clean_cfg().Autoclean()       # 自动清洗归 0\r\n  #  Run.speed_cfg().setMotorfomartting() #XYZ速度标准化\r\n   # Run.speed_cfg().setfomartting()  # 格式化 墨栈 刮片速度\r\n    Run.face_display().set_colo_InkCount()  #墨量体积\r\n    Run.face_display().set_InkCountColor()  #墨量 PRN 色续\r\n  #  Run.clean_cfg().CleanActionSetFomartting()#格式化清洗参数位置\r\n   # Run.board_cfg().setRam()                  #板卡内存设置\r\n  #  Run.board_cfg().setSupportHead()          #板卡支持喷头数量\r\n    print('完成1')\r\n    print(\"++++++++++++++++++++++++++++以上为默认设置+++++++++++++++++++++++++++++++++\")\r\n   # Run.face_display().O()   # 显示模式归0\r\n  #  Run.print_cfg().O()      # 白边模式归零\r\n    Run.head_cfg().Oset_HeadOne_0()  # 所有喷头设置 为1号头数据\r\n   # Run.head_cfg().Oset_HeadOneTWO_0()     #所有喷头按照1  2喷头标准循环设置\r\n #   Run.head_cfg().SetuseHeadNNNNN()        #更改喷头装配方向\r\n    Run.head_cfg().Oset_NunHead400_O(3,8)  #归零 第几个喷头参数（5-8）\r\n  #  Run.head_cfg().SetuseHeadnum(2)      # 设置实际使用喷头数量\r\n    Run.print_cfg().Oset_clibration()    # 双向步进校准归零1\r\n  #  Run.action_cfg().O()  # 动作设置归零\r\n# Run.board_cfg().Maxtrip()  # 最大行程设置\r\n  #  Run.system_cfg().O()     # USB\r\n #   Run.system_cfg().ETH()  # 网口地址\r\n #   Run.clean_cfg().not_UV()  # 清洗接口  UV 8 7 6 5  notUV 10 9 8 7\r\n    #   Run.head_cfg().Oset_180_w_o_s()  #喷头数据归零\r\n  #  Run.textp_cfg().O()       # 测试图归 0\r\n  #  Run.textp_cfg().B_16()    # 测试图 并排\r\n  #  Run.textp_cfg().OSet_TestPrn1()#打印文件测试图置1\r\n    print('---------------------------------特种机型修改---特种动作-------------------------------')\r\n    # a  X白边 b Y白边  c   Y白边运行模式 # d 打印特种动作 #  e  多份 小车复位不复位 # f 多份不复位，下一份方向  #\r\n    #                           （a,   b,  c,  d,  e,   f）\r\n   # Run.Fixed_action().Pactionset('1','0','0','0','0','0')\r\n#    Run.Fixed_action().P2()  #双工位\r\n#    Run.Fixed_action().ZX()  #纸箱机\r\n#    Run.Fixed_action().PB() #平板机\r\n #   Run.Fixed_action().Xzj()  #写真机\r\n#    Run.Fixed_action().TY()  #椭圆机\r\n    #Run.Fixed_action().PT()  #跑台机\r\n    print(\"============================置零修改结束======================================\")\r\n    tree.write(xml_file, encoding='utf-8')  # 保存\r\n    Run.update_xml()  # 头文件追加\r\n    print('修改完成！！！！！！！！！！！！！！^x^')\r\n\r\nif __name__ == '__main__':\r\n path= \"I:\\客户测试集\\新建文件夹 (2)\\BetterPrinterApp_TX800\\SoftConfig\"  #'E:\\2.0打印软件2022年1月\\G5I\\SoftConfig'  # 目标文件夹\r\n   #加载目录F:\\售后体系库\\……【客户软件库】……\\V2.0平台\\自动修改\r\n os.chdir(path)\r\n f_name=main(path).find_name(path)\r\n print('可修改配置数量：',len(f_name),'可修改配置名：',f_name)\r\n\r\n while True:\r\n    setNUM = int(input('请输入修改个数（1，任意数值修改全部）'))   #设置  修改文件个数\r\n #设置 目标个数文件\r\n    if setNUM == 1:\r\n        setint = int(input('请输入第几个：'))\r\n        f_name2 = f_name[setint - 1]  # [num]\r\n        print(\"开始修改配置\", f_name2)\r\n        setset(path,f_name2)\r\n        break\r\n    else:\r\n        choice_yn = input('确认修改多个配置文件 y/n?（选择n将退出修改）:')\r\n        if setNUM > len(f_name):\r\n            print('输入修改个数超过实际数量！！')\r\n        else:\r\n            if choice_yn == 'y' or choice_yn == 'Y':\r\n\r\n                for num in range(0, setNUM):\r\n                    f_name2 = f_name[num]  # [num]\r\n                    print(\"开始修改配置\", f_name2)\r\n                    setset(path,f_name2)\r\n            else:\r\n                print('退出修改')\r\n            break\r\n\r\n    continue
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/实用工具/完成工具/XML_ROOT_CFG配置工具.py b/实用工具/完成工具/XML_ROOT_CFG配置工具.py
--- a/实用工具/完成工具/XML_ROOT_CFG配置工具.py	(revision 5a39375ae23e536c9b19308182d24df2a7aff842)
+++ b/实用工具/完成工具/XML_ROOT_CFG配置工具.py	(date 1662646912699)
@@ -52,19 +52,19 @@
 
      def set_colo_op(self):
          while True:
-            if root[0][11][0].attrib[nname]=='nInkCheckColor_0':
-             root[0][11][0].set(vv, '0')
-             root[0][11][1].set(vv, '1')
-             root[0][11][2].set(vv, '2')
-             root[0][11][3].set(vv, '3')
-             root[0][11][4].set(vv, '4')
-             root[0][11][5].set(vv, '5')
-             root[0][11][6].set(vv, '6')
-             root[0][11][7].set(vv, '7')
-             break
-            else:
-             print(root[0][11][0].attrib[aa],'配置错误，！请停止更新后尝试')
-             sleep(5)
+                if root[0][11][0].attrib[nname]=='nInkCheckColor_0':
+                 root[0][11][0].set(vv, '0')
+                 root[0][11][1].set(vv, '1')
+                 root[0][11][2].set(vv, '2')
+                 root[0][11][3].set(vv, '3')
+                 root[0][11][4].set(vv, '4')
+                 root[0][11][5].set(vv, '5')
+                 root[0][11][6].set(vv, '6')
+                 root[0][11][7].set(vv, '7')
+                 break
+                else:
+                 print(root[0][11][0].attrib[aa],'配置错误，！请停止更新后尝试')
+                 sleep(5)
          print('墨量显示：修改完成：')
 
      def set_colo_InkCount(self):
